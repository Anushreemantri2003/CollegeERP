# Generated by Django 4.2.19 on 2025-02-20 18:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('core', '0001_create_schemas'),  # Add this dependency
    ]

    operations = [
        # Ensure schema exists before creating tables
        migrations.RunSQL(
            'CREATE SCHEMA IF NOT EXISTS "ADMIN";'
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('USER_ID', models.CharField(db_column='USER_ID', max_length=20, primary_key=True, serialize=False)),
                ('USERNAME', models.CharField(db_column='USERNAME', max_length=150, unique=True)),
                ('PASSWORD', models.CharField(db_column='PASSWORD', max_length=128)),
                ('EMAIL', models.EmailField(db_column='EMAIL', max_length=254, unique=True)),
                ('FIRST_NAME', models.CharField(db_column='FIRST_NAME', max_length=150)),
                ('LAST_NAME', models.CharField(db_column='LAST_NAME', max_length=150)),
                ('PHONE_NUMBER', models.CharField(blank=True, db_column='PHONE_NUMBER', max_length=15, null=True)),
                ('PROFILE_PICTURE', models.ImageField(blank=True, db_column='PROFILE_PICTURE', null=True, upload_to='profile_pics/')),
                ('IS_ACTIVE', models.BooleanField(db_column='IS_ACTIVE', default=True)),
                ('IS_STAFF', models.BooleanField(db_column='IS_STAFF', default=False)),
                ('IS_SUPERUSER', models.BooleanField(db_column='IS_SUPERUSER', default=False)),
                ('IS_EMAIL_VERIFIED', models.BooleanField(db_column='IS_EMAIL_VERIFIED', default=False)),
                ('CREATED_AT', models.DateTimeField(auto_now_add=True, db_column='CREATED_AT')),
                ('UPDATED_AT', models.DateTimeField(auto_now=True, db_column='UPDATED_AT')),
                ('LAST_LOGIN', models.DateTimeField(blank=True, db_column='LAST_LOGIN', null=True)),
                ('DATE_JOINED', models.DateTimeField(db_column='DATE_JOINED', default=django.utils.timezone.now)),
                ('LAST_LOGIN_IP', models.GenericIPAddressField(blank=True, db_column='LAST_LOGIN_IP', null=True)),
                ('LAST_LOGIN_ATTEMPT', models.DateTimeField(blank=True, db_column='LAST_LOGIN_ATTEMPT', null=True)),
                ('LAST_FAILED_LOGIN', models.DateTimeField(blank=True, db_column='LAST_FAILED_LOGIN', null=True)),
                ('FAILED_LOGIN_ATTEMPTS', models.IntegerField(db_column='FAILED_LOGIN_ATTEMPTS', default=0)),
                ('IS_LOCKED', models.BooleanField(db_column='IS_LOCKED', default=False)),
                ('LOCKED_UNTIL', models.DateTimeField(blank=True, db_column='LOCKED_UNTIL', null=True)),
                ('PASSWORD_CHANGED_AT', models.DateTimeField(blank=True, db_column='PASSWORD_CHANGED_AT', null=True)),
                ('PERMANENT_LOCK', models.BooleanField(db_column='PERMANENT_LOCK', default=False)),
                ('LOCK_REASON', models.CharField(blank=True, db_column='LOCK_REASON', max_length=255, null=True)),
                ('OTP_SECRET', models.CharField(blank=True, db_column='OTP_SECRET', max_length=16, null=True)),
                ('OTP_CREATED_AT', models.DateTimeField(blank=True, db_column='OTP_CREATED_AT', null=True)),
                ('OTP_ATTEMPTS', models.IntegerField(db_column='OTP_ATTEMPTS', default=0)),
                ('OTP_VERIFIED', models.BooleanField(db_column='OTP_VERIFIED', default=False)),
                ('MAX_OTP_TRY', models.IntegerField(db_column='MAX_OTP_TRY', default=3)),
                ('OTP_BLOCKED_UNTIL', models.DateTimeField(blank=True, db_column='OTP_BLOCKED_UNTIL', null=True)),
                ('OTP_EXPIRY', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': '"ADMIN"."USERS"',
                'ordering': ['USER_ID'],
            },
        ),
        migrations.CreateModel(
            name='INSTITUTE',
            fields=[
                ('CREATED_AT', models.DateTimeField(auto_now_add=True, db_column='CREATED_AT')),
                ('UPDATED_AT', models.DateTimeField(auto_now=True, db_column='UPDATED_AT')),
                ('DELETED_AT', models.DateTimeField(blank=True, db_column='DELETED_AT', null=True)),
                ('IS_DELETED', models.BooleanField(db_column='IS_DELETED', default=False)),
                ('INSTITUTE_ID', models.AutoField(db_column='INSTITUTE_ID', primary_key=True, serialize=False)),
                ('NAME', models.CharField(db_column='NAME', max_length=255)),
                ('CODE', models.CharField(db_column='CODE', max_length=50, unique=True)),
                ('ADDRESS', models.TextField(db_column='ADDRESS')),
                ('CONTACT_NUMBER', models.CharField(db_column='CONTACT_NUMBER', max_length=15)),
                ('EMAIL', models.EmailField(db_column='EMAIL', max_length=254, unique=True)),
                ('WEBSITE', models.URLField(blank=True, db_column='WEBSITE', null=True)),
                ('ESTD_YEAR', models.IntegerField(db_column='ESTD_YEAR')),
                ('IS_ACTIVE', models.BooleanField(db_column='IS_ACTIVE', default=True)),
                ('CREATED_BY', models.ForeignKey(blank=True, db_column='CREATED_BY', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('DELETED_BY', models.ForeignKey(blank=True, db_column='DELETED_BY', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Institute',
                'verbose_name_plural': 'Institutes',
                'db_table': 'INSTITUTES',
            },
        ),
        migrations.CreateModel(
            name='UNIVERSITY',
            fields=[
                ('CREATED_AT', models.DateTimeField(auto_now_add=True, db_column='CREATED_AT')),
                ('UPDATED_AT', models.DateTimeField(auto_now=True, db_column='UPDATED_AT')),
                ('DELETED_AT', models.DateTimeField(blank=True, db_column='DELETED_AT', null=True)),
                ('IS_DELETED', models.BooleanField(db_column='IS_DELETED', default=False)),
                ('UNIVERSITY_ID', models.AutoField(db_column='UNIVERSITY_ID', primary_key=True, serialize=False)),
                ('NAME', models.CharField(db_column='NAME', max_length=255)),
                ('CODE', models.CharField(db_column='CODE', max_length=50, unique=True)),
                ('ADDRESS', models.TextField(db_column='ADDRESS')),
                ('CONTACT_NUMBER', models.CharField(db_column='CONTACT_NUMBER', max_length=15)),
                ('EMAIL', models.EmailField(db_column='EMAIL', max_length=254, unique=True)),
                ('WEBSITE', models.URLField(blank=True, db_column='WEBSITE', null=True)),
                ('ESTD_YEAR', models.IntegerField(db_column='ESTD_YEAR')),
                ('IS_ACTIVE', models.BooleanField(db_column='IS_ACTIVE', default=True)),
                ('CREATED_BY', models.ForeignKey(blank=True, db_column='CREATED_BY', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('DELETED_BY', models.ForeignKey(blank=True, db_column='DELETED_BY', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('UPDATED_BY', models.ForeignKey(blank=True, db_column='UPDATED_BY', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'University',
                'verbose_name_plural': 'Universities',
                'db_table': 'UNIVERSITIES',
            },
        ),
        migrations.CreateModel(
            name='PROGRAM',
            fields=[
                ('CREATED_AT', models.DateTimeField(auto_now_add=True, db_column='CREATED_AT')),
                ('UPDATED_AT', models.DateTimeField(auto_now=True, db_column='UPDATED_AT')),
                ('DELETED_AT', models.DateTimeField(blank=True, db_column='DELETED_AT', null=True)),
                ('IS_DELETED', models.BooleanField(db_column='IS_DELETED', default=False)),
                ('PROGRAM_ID', models.AutoField(db_column='PROGRAM_ID', primary_key=True, serialize=False)),
                ('NAME', models.CharField(db_column='NAME', max_length=255)),
                ('CODE', models.CharField(db_column='CODE', max_length=20, unique=True)),
                ('DURATION_YEARS', models.IntegerField(db_column='DURATION_YEARS')),
                ('LEVEL', models.CharField(choices=[('UG', 'Undergraduate'), ('PG', 'Postgraduate'), ('DIP', 'Diploma')], db_column='LEVEL', max_length=10)),
                ('TYPE', models.CharField(choices=[('FT', 'Full Time'), ('PT', 'Part Time')], db_column='TYPE', max_length=2)),
                ('DESCRIPTION', models.TextField(blank=True, db_column='DESCRIPTION', default='', null=True)),
                ('IS_ACTIVE', models.BooleanField(db_column='IS_ACTIVE', default=True)),
                ('CREATED_BY', models.ForeignKey(blank=True, db_column='CREATED_BY', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('DELETED_BY', models.ForeignKey(blank=True, db_column='DELETED_BY', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('INSTITUTE', models.ForeignKey(db_column='INSTITUTE_ID', on_delete=django.db.models.deletion.PROTECT, related_name='programs', to='accounts.institute')),
                ('UPDATED_BY', models.ForeignKey(blank=True, db_column='UPDATED_BY', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Program',
                'verbose_name_plural': 'Programs',
                'db_table': 'PROGRAMS',
            },
        ),
        migrations.CreateModel(
            name='PASSWORD_HISTORY',
            fields=[
                ('PASSWORD_HISTORY_ID', models.AutoField(db_column='PASSWORD_HISTORY_ID', primary_key=True, serialize=False)),
                ('PASSWORD', models.CharField(db_column='PASSWORD', max_length=128)),
                ('CREATED_AT', models.DateTimeField(auto_now_add=True, db_column='CREATED_AT')),
                ('USER', models.ForeignKey(db_column='USER_ID', on_delete=django.db.models.deletion.CASCADE, related_name='password_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'PASSWORD_HISTORY',
                'ordering': ['-CREATED_AT'],
            },
        ),
        migrations.AddField(
            model_name='institute',
            name='UNIVERSITY',
            field=models.ForeignKey(db_column='UNIVERSITY_ID', on_delete=django.db.models.deletion.PROTECT, related_name='institutes', to='accounts.university'),
        ),
        migrations.AddField(
            model_name='institute',
            name='UPDATED_BY',
            field=models.ForeignKey(blank=True, db_column='UPDATED_BY', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DESIGNATION',
            fields=[
                ('DELETED_AT', models.DateTimeField(blank=True, db_column='DELETED_AT', null=True)),
                ('IS_DELETED', models.BooleanField(db_column='IS_DELETED', default=False)),
                ('DESIGNATION_ID', models.AutoField(db_column='DESIGNATION_ID', primary_key=True, serialize=False)),
                ('NAME', models.CharField(db_column='NAME', max_length=50, unique=True)),
                ('CODE', models.CharField(db_column='CODE', max_length=20, unique=True)),
                ('DESCRIPTION', models.TextField(blank=True, db_column='DESCRIPTION', null=True)),
                ('PERMISSIONS', models.JSONField(db_column='PERMISSIONS', default=dict, help_text='Define permissions like {"module_name": {"action": bool}}')),
                ('IS_ACTIVE', models.BooleanField(db_column='IS_ACTIVE', default=True)),
                ('CREATED_AT', models.DateTimeField(auto_now_add=True, db_column='CREATED_AT')),
                ('UPDATED_AT', models.DateTimeField(auto_now=True, db_column='UPDATED_AT')),
                ('CREATED_BY', models.ForeignKey(blank=True, db_column='CREATED_BY', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('DELETED_BY', models.ForeignKey(blank=True, db_column='DELETED_BY', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('UPDATED_BY', models.ForeignKey(blank=True, db_column='UPDATED_BY', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Designation',
                'verbose_name_plural': 'Designations',
                'db_table': 'DESIGNATIONS',
            },
        ),
        migrations.CreateModel(
            name='BRANCH',
            fields=[
                ('CREATED_AT', models.DateTimeField(auto_now_add=True, db_column='CREATED_AT')),
                ('UPDATED_AT', models.DateTimeField(auto_now=True, db_column='UPDATED_AT')),
                ('DELETED_AT', models.DateTimeField(blank=True, db_column='DELETED_AT', null=True)),
                ('IS_DELETED', models.BooleanField(db_column='IS_DELETED', default=False)),
                ('BRANCH_ID', models.AutoField(db_column='BRANCH_ID', primary_key=True, serialize=False)),
                ('NAME', models.CharField(db_column='NAME', max_length=255)),
                ('CODE', models.CharField(db_column='CODE', max_length=20, unique=True)),
                ('DESCRIPTION', models.TextField(blank=True, db_column='DESCRIPTION', default='', null=True)),
                ('IS_ACTIVE', models.BooleanField(db_column='IS_ACTIVE', default=True)),
                ('CREATED_BY', models.ForeignKey(blank=True, db_column='CREATED_BY', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('DELETED_BY', models.ForeignKey(blank=True, db_column='DELETED_BY', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted', to=settings.AUTH_USER_MODEL)),
                ('PROGRAM', models.ForeignKey(db_column='PROGRAM_ID', on_delete=django.db.models.deletion.PROTECT, related_name='branches', to='accounts.program')),
                ('UPDATED_BY', models.ForeignKey(blank=True, db_column='UPDATED_BY', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Branch',
                'verbose_name_plural': 'Branches',
                'db_table': 'BRANCHES',
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='DESIGNATION',
            field=models.ForeignKey(blank=True, db_column='DESIGNATION_ID', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='users', to='accounts.designation'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
